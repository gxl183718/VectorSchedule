package cn.ac.iie.server; /**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class VectorData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3170084873229457457L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"VectorData\",\"fields\":[{\"name\":\"g_id\",\"type\":[\"null\",\"string\"]},{\"name\":\"params\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}]},{\"name\":\"publish_time\",\"type\":[\"null\",\"long\"]},{\"name\":\"space\",\"type\":[\"null\",\"string\"]},{\"name\":\"vector\",\"type\":[\"null\",\"bytes\"]},{\"name\":\"version\",\"type\":[\"null\",\"string\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<VectorData> ENCODER =
      new BinaryMessageEncoder<VectorData>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<VectorData> DECODER =
      new BinaryMessageDecoder<VectorData>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<VectorData> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<VectorData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<VectorData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<VectorData>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this VectorData to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a VectorData from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a VectorData instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static VectorData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private CharSequence g_id;
   private java.util.Map<CharSequence, CharSequence> params;
   private Long publish_time;
   private CharSequence space;
   private java.nio.ByteBuffer vector;
   private CharSequence version;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public VectorData() {}

  /**
   * All-args constructor.
   * @param g_id The new value for g_id
   * @param params The new value for params
   * @param publish_time The new value for publish_time
   * @param space The new value for space
   * @param vector The new value for vector
   * @param version The new value for version
   */
  public VectorData(CharSequence g_id, java.util.Map<CharSequence, CharSequence> params, Long publish_time, CharSequence space, java.nio.ByteBuffer vector, CharSequence version) {
    this.g_id = g_id;
    this.params = params;
    this.publish_time = publish_time;
    this.space = space;
    this.vector = vector;
    this.version = version;
  }

  public SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return g_id;
    case 1: return params;
    case 2: return publish_time;
    case 3: return space;
    case 4: return vector;
    case 5: return version;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: g_id = (CharSequence)value$; break;
    case 1: params = (java.util.Map<CharSequence, CharSequence>)value$; break;
    case 2: publish_time = (Long)value$; break;
    case 3: space = (CharSequence)value$; break;
    case 4: vector = (java.nio.ByteBuffer)value$; break;
    case 5: version = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'g_id' field.
   * @return The value of the 'g_id' field.
   */
  public CharSequence getGId() {
    return g_id;
  }


  /**
   * Sets the value of the 'g_id' field.
   * @param value the value to set.
   */
  public void setGId(CharSequence value) {
    this.g_id = value;
  }

  /**
   * Gets the value of the 'params' field.
   * @return The value of the 'params' field.
   */
  public java.util.Map<CharSequence, CharSequence> getParams() {
    return params;
  }


  /**
   * Sets the value of the 'params' field.
   * @param value the value to set.
   */
  public void setParams(java.util.Map<CharSequence, CharSequence> value) {
    this.params = value;
  }

  /**
   * Gets the value of the 'publish_time' field.
   * @return The value of the 'publish_time' field.
   */
  public Long getPublishTime() {
    return publish_time;
  }


  /**
   * Sets the value of the 'publish_time' field.
   * @param value the value to set.
   */
  public void setPublishTime(Long value) {
    this.publish_time = value;
  }

  /**
   * Gets the value of the 'space' field.
   * @return The value of the 'space' field.
   */
  public CharSequence getSpace() {
    return space;
  }


  /**
   * Sets the value of the 'space' field.
   * @param value the value to set.
   */
  public void setSpace(CharSequence value) {
    this.space = value;
  }

  /**
   * Gets the value of the 'vector' field.
   * @return The value of the 'vector' field.
   */
  public java.nio.ByteBuffer getVector() {
    return vector;
  }


  /**
   * Sets the value of the 'vector' field.
   * @param value the value to set.
   */
  public void setVector(java.nio.ByteBuffer value) {
    this.vector = value;
  }

  /**
   * Gets the value of the 'version' field.
   * @return The value of the 'version' field.
   */
  public CharSequence getVersion() {
    return version;
  }


  /**
   * Sets the value of the 'version' field.
   * @param value the value to set.
   */
  public void setVersion(CharSequence value) {
    this.version = value;
  }

  /**
   * Creates a new VectorData RecordBuilder.
   * @return A new VectorData RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new VectorData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new VectorData RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * Creates a new VectorData RecordBuilder by copying an existing VectorData instance.
   * @param other The existing instance to copy.
   * @return A new VectorData RecordBuilder
   */
  public static Builder newBuilder(VectorData other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * RecordBuilder for VectorData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<VectorData>
    implements org.apache.avro.data.RecordBuilder<VectorData> {

    private CharSequence g_id;
    private java.util.Map<CharSequence, CharSequence> params;
    private Long publish_time;
    private CharSequence space;
    private java.nio.ByteBuffer vector;
    private CharSequence version;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.g_id)) {
        this.g_id = data().deepCopy(fields()[0].schema(), other.g_id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.params)) {
        this.params = data().deepCopy(fields()[1].schema(), other.params);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.publish_time)) {
        this.publish_time = data().deepCopy(fields()[2].schema(), other.publish_time);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.space)) {
        this.space = data().deepCopy(fields()[3].schema(), other.space);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.vector)) {
        this.vector = data().deepCopy(fields()[4].schema(), other.vector);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.version)) {
        this.version = data().deepCopy(fields()[5].schema(), other.version);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing VectorData instance
     * @param other The existing instance to copy.
     */
    private Builder(VectorData other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.g_id)) {
        this.g_id = data().deepCopy(fields()[0].schema(), other.g_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.params)) {
        this.params = data().deepCopy(fields()[1].schema(), other.params);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.publish_time)) {
        this.publish_time = data().deepCopy(fields()[2].schema(), other.publish_time);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.space)) {
        this.space = data().deepCopy(fields()[3].schema(), other.space);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.vector)) {
        this.vector = data().deepCopy(fields()[4].schema(), other.vector);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.version)) {
        this.version = data().deepCopy(fields()[5].schema(), other.version);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'g_id' field.
      * @return The value.
      */
    public CharSequence getGId() {
      return g_id;
    }


    /**
      * Sets the value of the 'g_id' field.
      * @param value The value of 'g_id'.
      * @return This builder.
      */
    public Builder setGId(CharSequence value) {
      validate(fields()[0], value);
      this.g_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'g_id' field has been set.
      * @return True if the 'g_id' field has been set, false otherwise.
      */
    public boolean hasGId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'g_id' field.
      * @return This builder.
      */
    public Builder clearGId() {
      g_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'params' field.
      * @return The value.
      */
    public java.util.Map<CharSequence, CharSequence> getParams() {
      return params;
    }


    /**
      * Sets the value of the 'params' field.
      * @param value The value of 'params'.
      * @return This builder.
      */
    public Builder setParams(java.util.Map<CharSequence, CharSequence> value) {
      validate(fields()[1], value);
      this.params = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'params' field has been set.
      * @return True if the 'params' field has been set, false otherwise.
      */
    public boolean hasParams() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'params' field.
      * @return This builder.
      */
    public Builder clearParams() {
      params = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'publish_time' field.
      * @return The value.
      */
    public Long getPublishTime() {
      return publish_time;
    }


    /**
      * Sets the value of the 'publish_time' field.
      * @param value The value of 'publish_time'.
      * @return This builder.
      */
    public Builder setPublishTime(Long value) {
      validate(fields()[2], value);
      this.publish_time = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'publish_time' field has been set.
      * @return True if the 'publish_time' field has been set, false otherwise.
      */
    public boolean hasPublishTime() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'publish_time' field.
      * @return This builder.
      */
    public Builder clearPublishTime() {
      publish_time = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'space' field.
      * @return The value.
      */
    public CharSequence getSpace() {
      return space;
    }


    /**
      * Sets the value of the 'space' field.
      * @param value The value of 'space'.
      * @return This builder.
      */
    public Builder setSpace(CharSequence value) {
      validate(fields()[3], value);
      this.space = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'space' field has been set.
      * @return True if the 'space' field has been set, false otherwise.
      */
    public boolean hasSpace() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'space' field.
      * @return This builder.
      */
    public Builder clearSpace() {
      space = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'vector' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getVector() {
      return vector;
    }


    /**
      * Sets the value of the 'vector' field.
      * @param value The value of 'vector'.
      * @return This builder.
      */
    public Builder setVector(java.nio.ByteBuffer value) {
      validate(fields()[4], value);
      this.vector = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'vector' field has been set.
      * @return True if the 'vector' field has been set, false otherwise.
      */
    public boolean hasVector() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'vector' field.
      * @return This builder.
      */
    public Builder clearVector() {
      vector = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'version' field.
      * @return The value.
      */
    public CharSequence getVersion() {
      return version;
    }


    /**
      * Sets the value of the 'version' field.
      * @param value The value of 'version'.
      * @return This builder.
      */
    public Builder setVersion(CharSequence value) {
      validate(fields()[5], value);
      this.version = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'version' field has been set.
      * @return True if the 'version' field has been set, false otherwise.
      */
    public boolean hasVersion() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'version' field.
      * @return This builder.
      */
    public Builder clearVersion() {
      version = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public VectorData build() {
      try {
        VectorData record = new VectorData();
        record.g_id = fieldSetFlags()[0] ? this.g_id : (CharSequence) defaultValue(fields()[0]);
        record.params = fieldSetFlags()[1] ? this.params : (java.util.Map<CharSequence, CharSequence>) defaultValue(fields()[1]);
        record.publish_time = fieldSetFlags()[2] ? this.publish_time : (Long) defaultValue(fields()[2]);
        record.space = fieldSetFlags()[3] ? this.space : (CharSequence) defaultValue(fields()[3]);
        record.vector = fieldSetFlags()[4] ? this.vector : (java.nio.ByteBuffer) defaultValue(fields()[4]);
        record.version = fieldSetFlags()[5] ? this.version : (CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<VectorData>
    WRITER$ = (org.apache.avro.io.DatumWriter<VectorData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<VectorData>
    READER$ = (org.apache.avro.io.DatumReader<VectorData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.g_id == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.g_id);
    }

    if (this.params == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.params.size();
      out.writeMapStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (java.util.Map.Entry<CharSequence, CharSequence> e0: this.params.entrySet()) {
        actualSize0++;
        out.startItem();
        out.writeString(e0.getKey());
        CharSequence v0 = e0.getValue();
        out.writeString(v0);
      }
      out.writeMapEnd();
      if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

    if (this.publish_time == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.publish_time);
    }

    if (this.space == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.space);
    }

    if (this.vector == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBytes(this.vector);
    }

    if (this.version == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.version);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.g_id = null;
      } else {
        this.g_id = in.readString(this.g_id instanceof Utf8 ? (Utf8)this.g_id : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.params = null;
      } else {
        long size0 = in.readMapStart();
        java.util.Map<CharSequence, CharSequence> m0 = this.params; // Need fresh name due to limitation of macro system
        if (m0 == null) {
          m0 = new java.util.HashMap<CharSequence, CharSequence>((int)size0);
          this.params = m0;
        } else m0.clear();
        for ( ; 0 < size0; size0 = in.mapNext()) {
          for ( ; size0 != 0; size0--) {
            CharSequence k0 = null;
            k0 = in.readString(k0 instanceof Utf8 ? (Utf8)k0 : null);
            CharSequence v0 = null;
            v0 = in.readString(v0 instanceof Utf8 ? (Utf8)v0 : null);
            m0.put(k0, v0);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.publish_time = null;
      } else {
        this.publish_time = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.space = null;
      } else {
        this.space = in.readString(this.space instanceof Utf8 ? (Utf8)this.space : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.vector = null;
      } else {
        this.vector = in.readBytes(this.vector);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.version = null;
      } else {
        this.version = in.readString(this.version instanceof Utf8 ? (Utf8)this.version : null);
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.g_id = null;
          } else {
            this.g_id = in.readString(this.g_id instanceof Utf8 ? (Utf8)this.g_id : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.params = null;
          } else {
            long size0 = in.readMapStart();
            java.util.Map<CharSequence, CharSequence> m0 = this.params; // Need fresh name due to limitation of macro system
            if (m0 == null) {
              m0 = new java.util.HashMap<CharSequence, CharSequence>((int)size0);
              this.params = m0;
            } else m0.clear();
            for ( ; 0 < size0; size0 = in.mapNext()) {
              for ( ; size0 != 0; size0--) {
                CharSequence k0 = null;
                k0 = in.readString(k0 instanceof Utf8 ? (Utf8)k0 : null);
                CharSequence v0 = null;
                v0 = in.readString(v0 instanceof Utf8 ? (Utf8)v0 : null);
                m0.put(k0, v0);
              }
            }
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.publish_time = null;
          } else {
            this.publish_time = in.readLong();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.space = null;
          } else {
            this.space = in.readString(this.space instanceof Utf8 ? (Utf8)this.space : null);
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.vector = null;
          } else {
            this.vector = in.readBytes(this.vector);
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.version = null;
          } else {
            this.version = in.readString(this.version instanceof Utf8 ? (Utf8)this.version : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










